rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // A user can read and write their own document.
    match /users/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }

    // A user can read devices they own.
    match /devices/{deviceId} {
      // Allow reading a list of devices ONLY if the query is filtering by the user's ID.
      // This is the key fix. It allows the main query on the dashboard to work.
      allow read: if request.auth != null && request.auth.uid == resource.data.ownerId;

      // Allow a user to update or delete a device if they own it.
      // We use get() to check the existing document's ownerId before allowing the write.
      allow update, delete: if request.auth != null && get(/databases/$(database)/documents/devices/$(deviceId)).data.ownerId == request.auth.uid;
    }

    // The device's real-time state.
    match /deviceStates/{deviceId} {
      // Allow reading the state of a device if the user owns the parent device.
      allow read: if request.auth != null && get(/databases/$(database)/documents/devices/$(deviceId)).data.ownerId == request.auth.uid;
      
      // Allow writing to the state of a device if the user owns the parent device.
      allow write: if request.auth != null && get(/databases/$(database)/documents/devices/$(deviceId)).data.ownerId == request.auth.uid;
    }
    
    // Rules for the temporary device claim process.
    match /deviceClaims/{deviceId} {
      // A logged-in user can create a claim for a device.
      allow create: if request.auth != null && request.resource.data.ownerId == request.auth.uid;
      
      // For development: allow an unauthenticated device to read and delete its own claim.
      allow read, delete: if true; 
    }
  }
}
